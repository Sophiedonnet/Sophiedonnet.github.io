tau1
tau0
#### M step
mu.new <- sum(y*tau1)/sum(tau1)
prob.pi.new <- mean(tau0)
#
prob.pi <- mean(y==0)
mu <- mean(y[y>0])
log.lik <-c()
rho = 0.000001
#
cond = FALSE
### E step
tau0 <- prob.pi*(y==0)/lik(y,mu,prob.pi)
tau1 <- 1-tau0
#### M step
mu.new <- sum(y*tau1)/sum(tau1)
prob.pi.new <- mean(tau0)
tol= 0.000001
#
diff= 1
#### diff mu, prob.pi
diff = max((mu.new-mu)^2/mu^2, (prob.pi.new-prob.pi)^2/prob.pi)
diff
mu <- mu.new
prob.pi <- prob.pi.new
#####  log.Lik
log.lik = c(log.lik,sum(log(lik(y,mu,prob.pi))))
plot(log.lik)
prob.pi <- mean(y==0)
mu <- mean(y[y>0])
log.lik <-c()
tol= 0.000001
#
diff= 1
while (diff > rho) {
### E step
tau0 <- prob.pi*(y==0)/lik(y,mu,prob.pi)
tau1 <- 1-tau0
#### M step
mu.new <- sum(y*tau1)/sum(tau1)
prob.pi.new <- mean(tau0)
#### diff mu, prob.pi
diff = max((mu.new-mu)^2/mu^2, (prob.pi.new-prob.pi)^2/prob.pi)
mu <- mu.new
prob.pi <- prob.pi.new
#####  log.Lik
log.lik = c(log.lik,sum(log(lik(y,mu,prob.pi))))
}
plot(log.lik)
#
prob.pi <- mean(y==0)
mu <- mean(y[y>0])
log.lik <-c()
tol= 0.000001
#
diff= 1
while (diff > tol) {
### E step
tau0 <- prob.pi*(y==0)/lik(y,mu,prob.pi)
tau1 <- 1-tau0
#### M step
mu.new <- sum(y*tau1)/sum(tau1)
prob.pi.new <- mean(tau0)
#### diff mu, prob.pi
diff = max((mu.new-mu)^2/mu^2, (prob.pi.new-prob.pi)^2/prob.pi)
mu <- mu.new
prob.pi <- prob.pi.new
#####  log.Lik
log.lik = c(log.lik,sum(log(lik(y,mu,prob.pi))))
}
plot(log.lik)
#
prob.pi <- mean(y==0)
mu <- mean(y[y>0])
log.lik <-c()
tol= 0.000001
#
diff= 1
while (diff > tol) {
### E step
tau0 <- prob.pi*(y==0)/lik(y,mu,prob.pi)
tau1 <- 1-tau0
#### M step
mu.new <- sum(y*tau1)/sum(tau1)
prob.pi.new <- mean(tau0)
#### diff mu, prob.pi
diff = max((mu.new-mu)^2/mu^2, (prob.pi.new-prob.pi)^2/prob.pi)
print(diff)
mu <- mu.new
prob.pi <- prob.pi.new
#####  log.Lik
log.lik = c(log.lik,sum(log(lik(y,mu,prob.pi))))
}
#
prob.pi <- mean(y==0)
mu <- mean(y[y>0])
log.lik <-c()
tol= 0.000000000001
#
diff= 1
while (diff > tol) {
### E step
tau0 <- prob.pi*(y==0)/lik(y,mu,prob.pi)
tau1 <- 1-tau0
#### M step
mu.new <- sum(y*tau1)/sum(tau1)
prob.pi.new <- mean(tau0)
#### diff mu, prob.pi
diff = max((mu.new-mu)^2/mu^2, (prob.pi.new-prob.pi)^2/prob.pi)
print(diff)
mu <- mu.new
prob.pi <- prob.pi.new
#####  log.Lik
log.lik = c(log.lik,sum(log(lik(y,mu,prob.pi))))
}
plot(log.lik)
prob.pi <- mean(y==0)
mu <- mean(y[y>0])
log.lik <-c()
tol= 0.000000000001
#
diff= 1
while (diff > tol) {
### E step
tau0 <- prob.pi*(y==0)/lik(y,mu,prob.pi)
tau1 <- 1-tau0
#### M step
mu.new <- sum(y*tau1)/sum(tau1)
prob.pi.new <- mean(tau0)
#### diff mu, prob.pi
diff = max((mu.new-mu)^2/mu^2, (prob.pi.new-prob.pi)^2/prob.pi)
print(diff)
mu <- mu.new
prob.pi <- prob.pi.new
#####  log.Lik
log.lik = c(log.lik,sum(log(lik(y,mu,prob.pi))))
}
plot(log.lik)
#
prob.pi <- mean(y==0)
mu <- mean(y[y>0])
log.lik <-c()
tol= 1e(-20)
#
diff= 1
#
prob.pi <- mean(y==0)
mu <- mean(y[y>0])
log.lik <-c()
tol= 10^(-20)
#
diff= 1
while (diff > tol) {
### E step
tau0 <- prob.pi*(y==0)/lik(y,mu,prob.pi)
tau1 <- 1-tau0
#### M step
mu.new <- sum(y*tau1)/sum(tau1)
prob.pi.new <- mean(tau0)
#### diff mu, prob.pi
diff = max((mu.new-mu)^2/mu^2, (prob.pi.new-prob.pi)^2/prob.pi)
print(diff)
mu <- mu.new
prob.pi <- prob.pi.new
ll<- sum(log(lik(y,mu,prob.pi)))
print((c(mu,prob.pi,ll)))
#####  log.Lik
log.lik = c(log.lik,ll)
}
plot(log.lik)
# EM for ZIP model
tol <- 1e-6; diff <- 2*tol;
iterMax <- 1e3; iter <- 1
logL <- rep(NA, iterMax)
logL[iter] <- LogLik(pi, mu, y)
#### diff mu, prob.pi
diff = max(abs(mu.new-mu), abs(prob.pi.new-prob.pi))
diff
# ZIP model for abundance data
rm(list=ls());
# Data
abundance <- read.table('BarentsFish.csv', sep=';', header=TRUE)
j <- 10; n <- nrow(abundance)
y <- abundance[, 4+j]
y0 <- 1*(y==0)
hist(y, breaks=sqrt(n))
#
lik = function(y,mu,prob.pi){(y==0)*prob.pi + (1-prob.pi)*dpois(y,mu)}
#
prob.pi <- mean(y==0)
mu <- mean(y[y>0])
log.lik <-c()
tol= 10^(-20)
#
diff= 1
while (diff > tol) {
### E step
tau0 <- prob.pi*(y==0)/lik(y,mu,prob.pi)
tau1 <- 1-tau0
#### M step
mu.new <- sum(y*tau1)/sum(tau1)
prob.pi.new <- mean(tau0)
#### diff mu, prob.pi
diff = max(abs(mu.new-mu), abs(prob.pi.new-prob.pi))
print(diff)
mu <- mu.new
prob.pi <- prob.pi.new
ll<- sum(log(lik(y,mu,prob.pi)))
print((c(mu,prob.pi,ll)))
#####  log.Lik
log.lik = c(log.lik,ll)
}
plot(log.lik)
tau <- y0*pi/(pi + (1-pi)*exp(-mu))
tau
# ZIP model for abundance data
rm(list=ls());
# Data
abundance <- read.table('BarentsFish.csv', sep=';', header=TRUE)
j <- 10; n <- nrow(abundance)
y <- abundance[, 4+j]
y0 <- 1*(y==0)
hist(y, breaks=sqrt(n))
# Functions
LogLik <- function(pi, mu, y){sum(log(pi*(y==0) + (1-pi)*dpois(y, mu)))}
# Init
pi <- mean(y0)
mu <- mean(y)
# EM for ZIP model
tol <- 1e-6; diff <- 2*tol;
iterMax <- 1e3; iter <- 1
logL <- rep(NA, iterMax)
logL[iter] <- LogLik(pi, mu, y)
iter <- iter+1
# E step
tau <- y0*pi/(pi + (1-pi)*exp(-mu))
tau <- cbind(tau, (1-tau));
# M step
piNew <- mean(tau[, 1])
muNew <- sum(tau[, 2]*y)/sum(tau[, 2])
# Test & update
diff <- max(abs(c(piNew, muNew)-c(pi, mu)))
pi <- piNew;
mu <- muNew
logL[iter] <- LogLik(pi, mu, y)
cat(pi, mu, diff, logL[iter], '\n')
plot(logL[1:iter], type='b', pch=20)
# ZIP model for abundance data
rm(list=ls());
# Data
abundance <- read.table('BarentsFish.csv', sep=';', header=TRUE)
j <- 10; n <- nrow(abundance)
y <- abundance[, 4+j]
y0 <- 1*(y==0)
hist(y, breaks=sqrt(n))
# Functions
LogLik <- function(pi, mu, y){sum(log(pi*(y==0) + (1-pi)*dpois(y, mu)))}
# Init
pi <- mean(y0)
mu <- mean(y)
# EM for ZIP model
tol <- 1e-6; diff <- 2*tol;
iterMax <- 1e3; iter <- 1
logL <- rep(NA, iterMax)
logL[iter] <- LogLik(pi, mu, y)
while((diff > tol) & (iter < iterMax)){
iter <- iter+1
# E step
tau <- y0*pi/(pi + (1-pi)*exp(-mu))
tau <- cbind(tau, (1-tau));
# M step
piNew <- mean(tau[, 1])
muNew <- sum(tau[, 2]*y)/sum(tau[, 2])
# Test & update
diff <- max(abs(c(piNew, muNew)-c(pi, mu)))
pi <- piNew;
mu <- muNew
logL[iter] <- LogLik(pi, mu, y)
cat(pi, mu, diff, logL[iter], '\n')
}
plot(logL[1:iter], type='b', pch=20)
cat('ZIP: pi=', pi, ', mu=', mu, ', logL=', logL[iter], '\n')
cat('Poisson: mu=', mean(y), ', logL=', sum(dpois(y, mean(y), log=TRUE)), '\n')
# ZIP model for abundance data
rm(list=ls());
# Data
abundance <- read.table('BarentsFish.csv', sep=';', header=TRUE)
j <- 10; n <- nrow(abundance)
y <- abundance[, 4+j]
y0 <- 1*(y==0)
hist(y, breaks=sqrt(n))
#
lik = function(y,mu,prob.pi){(y==0)*prob.pi + (1-prob.pi)*dpois(y,mu)}
#
prob.pi <- mean(y==0)
mu <- mean(y[y>0])
log.lik <-c()
1e-6; diff <- 2*tol;
#
while (diff > tol) {
### E step
tau0 <- prob.pi*(y==0)/lik(y,mu,prob.pi)
tau1 <- 1-tau0
#### M step
mu.new <- sum(y*tau1)/sum(tau1)
prob.pi.new <- mean(tau0)
#### diff mu, prob.pi
diff = max(abs(mu.new-mu), abs(prob.pi.new-prob.pi))
print(diff)
mu <- mu.new
prob.pi <- prob.pi.new
ll<- sum(log(lik(y,mu,prob.pi)))
print((c(mu,prob.pi,ll)))
#####  log.Lik
log.lik = c(log.lik,ll)
}
plot(log.lik)
tol <- 1e-6; diff <- 2*tol;
#
while (diff > tol) {
### E step
tau0 <- prob.pi*(y==0)/lik(y,mu,prob.pi)
tau1 <- 1-tau0
#### M step
mu.new <- sum(y*tau1)/sum(tau1)
prob.pi.new <- mean(tau0)
#### diff mu, prob.pi
diff = max(abs(mu.new-mu), abs(prob.pi.new-prob.pi))
print(diff)
mu <- mu.new
prob.pi <- prob.pi.new
ll<- sum(log(lik(y,mu,prob.pi)))
print((c(mu,prob.pi,ll)))
#####  log.Lik
log.lik = c(log.lik,ll)
}
plot(log.lik)
cat('Poisson: mu=', mean(y), ', logL=', sum(dpois(y, mean(y), log=TRUE)), '\n')
# ZIP model for abundance data
rm(list=ls());
# Data
abundance <- read.table('BarentsFish.csv', sep=';', header=TRUE)
j <- 10; n <- nrow(abundance)
y <- abundance[, 4+j]
y0 <- 1*(y==0)
hist(y, breaks=sqrt(n))
# Functions
LogLik <- function(pi, mu, y){sum(log(pi*(y==0) + (1-pi)*dpois(y, mu)))}
# Init
pi <- mean(y0)
mu <- mean(y)
# EM for ZIP model
tol <- 1e-6; diff <- 2*tol;
iterMax <- 1e3; iter <- 1
logL <- rep(NA, iterMax)
logL[iter] <- LogLik(pi, mu, y)
while((diff > tol) & (iter < iterMax)){
iter <- iter+1
# E step
tau <- y0*pi/(pi + (1-pi)*exp(-mu))
tau <- cbind(tau, (1-tau));
# M step
piNew <- mean(tau[, 1])
muNew <- sum(tau[, 2]*y)/sum(tau[, 2])
# Test & update
diff <- max(abs(c(piNew, muNew)-c(pi, mu)))
pi <- piNew;
mu <- muNew
logL[iter] <- LogLik(pi, mu, y)
cat(pi, mu, diff, logL[iter], '\n')
}
plot(logL[1:iter], type='b', pch=20)
cat('ZIP: pi=', pi, ', mu=', mu, ', logL=', logL[iter], '\n')
cat('Poisson: mu=', mean(y), ', logL=', sum(dpois(y, mean(y), log=TRUE)), '\n')
# ZIP model for abundance data
rm(list=ls());
# Data
abundance <- read.table('BarentsFish.csv', sep=';', header=TRUE)
j <- 10; n <- nrow(abundance)
y <- abundance[, 4+j]
y0 <- 1*(y==0)
hist(y, breaks=sqrt(n))
#
lik = function(y,mu,prob.pi){(y==0)*prob.pi + (1-prob.pi)*dpois(y,mu)}
#
prob.pi <- mean(y==0)
mu <- mean(y[y>0])
log.lik <-c()
tol <- 1e-6; diff <- 2*tol;
#
while (diff > tol) {
### E step
tau0 <- prob.pi*(y==0)/lik(y,mu,prob.pi)
tau1 <- 1-tau0
#### M step
mu.new <- sum(y*tau1)/sum(tau1)
prob.pi.new <- mean(tau0)
#### diff mu, prob.pi
diff = max(abs(mu.new-mu), abs(prob.pi.new-prob.pi))
print(diff)
mu <- mu.new
prob.pi <- prob.pi.new
ll<- sum(log(lik(y,mu,prob.pi)))
print((c(mu,prob.pi,ll)))
#####  log.Lik
log.lik = c(log.lik,ll)
}
plot(log.lik)
# ZIP model for abundance data
rm(list=ls());
# Data
abundance <- read.table('BarentsFish.csv', sep=';', header=TRUE)
j <- 10; n <- nrow(abundance)
y <- abundance[, 4+j]
y0 <- 1*(y==0)
hist(y, breaks=sqrt(n))
#
lik = function(y,mu,prob.pi){(y==0)*prob.pi + (1-prob.pi)*dpois(y,mu)}
#
prob.pi <- mean(y==0)
mu <- mean(y[y>0])
log.lik <-c()
tol <- 1e-6; diff <- 2*tol;
### E step
tau0 <- prob.pi*(y==0)/lik(y,mu,prob.pi)
tau1 <- 1-tau0
#### M step
mu.new <- sum(y*tau1)/sum(tau1)
prob.pi.new <- mean(tau0)
#### diff mu, prob.pi
diff = max(abs(mu.new-mu), abs(prob.pi.new-prob.pi))
print(diff)
mu <- mu.new
prob.pi <- prob.pi.new
ll<- sum(log(lik(y,mu,prob.pi)))
print((c(mu,prob.pi,ll)))
#####  log.Lik
log.lik = c(log.lik,ll)
# ZIP model for abundance data
rm(list=ls());
# Data
abundance <- read.table('BarentsFish.csv', sep=';', header=TRUE)
j <- 10; n <- nrow(abundance)
y <- abundance[, 4+j]
y0 <- 1*(y==0)
hist(y, breaks=sqrt(n))
#
lik = function(y,mu,prob.pi){(y==0)*prob.pi + (1-prob.pi)*dpois(y,mu)}
#
prob.pi <- mean(y==0)
mu <- mean(y[y>0])
log.lik <-c()
tol <- 1e-6; diff <- 2*tol;
#
while (diff > tol) {
### E step
tau0 <- prob.pi*(y==0)/lik(y,mu,prob.pi)
tau1 <- 1-tau0
#### M step
mu.new <- sum(y*tau1)/sum(tau1)
prob.pi.new <- mean(tau0)
#### diff mu, prob.pi
diff = max(abs(mu.new-mu), abs(prob.pi.new-prob.pi))
print(diff)
mu <- mu.new
prob.pi <- prob.pi.new
ll<- sum(log(lik(y,mu,prob.pi)))
print((c(mu,prob.pi,ll)))
#####  log.Lik
log.lik = c(log.lik,ll)
}
plot(log.lik)
y <- abundance$Se_ma
y0 <- 1*(y==0)
hist(y, breaks=sqrt(n))
#
lik = function(y,mu,prob.pi){(y==0)*prob.pi + (1-prob.pi)*dpois(y,mu)}
#
prob.pi <- mean(y==0)
mu <- mean(y[y>0])
log.lik <-c()
tol <- 1e-6; diff <- 2*tol;
#
while (diff > tol) {
### E step
tau0 <- prob.pi*(y==0)/lik(y,mu,prob.pi)
tau1 <- 1-tau0
#### M step
mu.new <- sum(y*tau1)/sum(tau1)
prob.pi.new <- mean(tau0)
#### diff mu, prob.pi
diff = max(abs(mu.new-mu), abs(prob.pi.new-prob.pi))
print(diff)
mu <- mu.new
prob.pi <- prob.pi.new
ll<- sum(log(lik(y,mu,prob.pi)))
print((c(mu,prob.pi,ll)))
#####  log.Lik
log.lik = c(log.lik,ll)
}
library(shiny)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("golem")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
